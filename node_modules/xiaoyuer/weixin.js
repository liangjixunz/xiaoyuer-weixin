var userUtil = require('./xiaoyuer/userInfo'),
    fs = require('fs');
var events=require('events');
/*
* 为减少IO，在利用配置文件时使用闭包
*但同时设定一个事件监听器
* 用于监听设置的变化
* 以做到实时更改
 */
var updateFile=new events.EventEmitter();



/*
*设置自动回复
 */
exports.reply_settings = (function(){
    var fileAdd =  __dirname+"/../../reply-setting.json";
    var reply_body = JSON.parse(fs.readFileSync(fileAdd));

    /*
    *增加关键词回复
     */
    function   append_auto_reply(str) {
        reply_body.auto_reply[reply_body.auto_reply.length] = JSON.parse(str);

          var first =  fs.writeFileSync(fileAdd, JSON.stringify(reply_body))
           updateFile.emit("update")
         return true;
    }
    /*
    *删除一条关键词回复规则
     */
    function  delete_auto_reply(id){
        var temp = [];
        reply_body.auto_reply.forEach(function(value){
            if(value.id != id)
                temp[temp.length] = value;
        })
        reply_body.auto_reply = temp;

        var first =  fs.writeFileSync(fileAdd, JSON.stringify(reply_body))
        updateFile.emit("update")
        return true;
    }
   /*
   *编辑关键词回复规则
    */
    function edit_auto_reply (str){
        var obj = JSON.parse(str);
        reply_body.auto_reply.forEach(function(value,index){
            if(value.id == obj.id){
                reply_body.auto_reply[index] = obj;
                console.log(obj.id);
            }

        })

        var first =  fs.writeFileSync(fileAdd, JSON.stringify(reply_body))
        updateFile.emit("update")
        return true;
    }
    /*
    *编辑关注时的回复内容
     */
    function edit_subscribe_reply(str){
        var obj = JSON.parse(str);
        reply_body.subscribe = obj;

        var first =  fs.writeFileSync(fileAdd, JSON.stringify(reply_body))
        updateFile.emit("update")
        return true;
    }
    function get_auto_reply(){
        return reply_body.auto_reply;
    }
    function get_sub_reply(){
        return   reply_body.subscribe
    }
    return{
        append: append_auto_reply,
        edit_sub: edit_subscribe_reply,
        edit_auto: edit_auto_reply,
        delete: delete_auto_reply,
        get_reply:get_auto_reply,
        get_sub:  get_sub_reply

    }
})()

/*
*根据设定的内容回复
 */
exports.reply_by_set = (function(){
    var fileAdd =  __dirname+"/../../reply-setting.json";
    var reply_body = JSON.parse(fs.readFileSync(fileAdd));
    updateFile.on("update",function(){
       reply_body = JSON.parse(fs.readFileSync(fileAdd));
    })
    var result
    return function(text){
         result = "";
        reply_body.auto_reply.forEach(function(value){
            if(value.keyword == text)
               result = JSON.parse(JSON.stringify(value.content))
        })
        if(!result){
            result = reply_body.auto_reply[0];
        }
        else{
            if(result.picurl){
                result.title = result.text;
                delete result.text;
                result.description=" ";

                result = [result];
            }
        }
        return result;
    }
})()

/*
*关注时的自动回复
 */
 var reply_sub = (function(){
    var result ={};
    var fileAdd =  __dirname+"/../../reply-setting.json";
    var reply_body = JSON.parse(fs.readFileSync(fileAdd));
    updateFile.on("update",function(){
        reply_body = JSON.parse(fs.readFileSync(fileAdd));
    })

    return function(){
        result = JSON.parse(JSON.stringify(reply_body.subscribe));

        if(result.type=="news"){
            result = result.content;
            result.title = result.text;
            delete result.text;
            result.description="";
            result = [result];
        }
        return result;
    }
})()

/*
*未绑定账号时的提示
 */
var reply_unbound = (function(){
    var result ={};
    var fileAdd =  __dirname+"/../../reply-setting.json";
    var reply_body = JSON.parse(fs.readFileSync(fileAdd));
    updateFile.on("update",function(){
        reply_body = JSON.parse(fs.readFileSync(fileAdd));
    })

    return function(){
        result = JSON.parse(JSON.stringify(reply_body.unbound));

        if(result.type=="news"){
            result = result.content;
            result.title = result.text;
            delete result.text;
            result.description="";
            result = [result];
        }
        return result;
    }
})()
exports.sub_proce = function(openid,ticket,callback){
    if(ticket)
    userUtil.scanQR(openid,ticket,function(code){ ;
       if(code==0){
           callback( "\n您已成功绑定您的小鱼儿账号")
       }
    })
   else
        callback(reply_sub());
}
/*
*对菜单click事件的回复
 */
exports.event_reply = function(openid,event_key,callback){
    switch (event_key){
        case "KF":{
            callback({
                type:"transfer_customer_service",
                content:""
            })
        }
        break;
        /*
        *点击后变更实时消息提醒的状态
         */
        case "PUSH":{
             userUtil.remind(openid,function(result){
                 switch (result){
                     case "on":
                         callback("您已开启消息提醒");
                         break;
                     case "off":
                         callback("您已关闭消息提醒");
                        break;
                     default :
                         callback(reply_unbound())
                 }
             })
        }
            break;
        /*
        *可用余额
         */
        case "LEFT":{
            userUtil.getBalance(openid,function(balance){
                if(balance==-1)
                    callback(reply_unbound());
                else
                    callback(balance)
            })
        }
            break;

    }
 }

exports.unsbscribe =  userUtil.cancelBind;