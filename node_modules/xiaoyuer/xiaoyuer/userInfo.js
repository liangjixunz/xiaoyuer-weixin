var request = require("request"),
    fs = require("fs");

var baseUrl = JSON.parse(fs.readFileSync(__dirname+"/../../../appConfig.json")).baseUrl;

/*
*获取用户余额
* 需要参数openid
* 若正常回调，参数为余额
* 否则参数为-1
 */
function getBalance(openid,callback){
    var url = baseUrl + "/user?method=balance&openid=" + openid;
    request(url,function(error,response,body){
        if (!error && response.statusCode==200){
            var resultObj = JSON.parse(body);
            if(resultObj.code !=0)
                callback(-1)
            else
                callback(resultObj.balance);
        }
    })
}

/*
*用户扫描二维码之后的处理
* 不管是否关注，均传ticket和openid
* 若成功则返回{"code":1}
 */
function scanQR(openid,ticket,callback){
    var url = baseUrl + "/user?method=scan?openid=" + openid + "&ticket=" + ticket;
    request(url,function(error,response,body){
        if (!error && response.statusCode==200){
            var resultObj = JSON.parse(body);
            callback(resultObj.code);
        }
    })
}
/*
*取消openid与小鱼儿账户的绑定
* 成功时返回-1
 */
function cancelBind(openid,callback){
    var url = baseUrl + "/user?method=cancel&openid=" + openid ;
    request(url,function(error,response,body){
        if (!error && response.statusCode==200){
            var resultObj = JSON.parse(body);
            if(body.error)
            {callback(-1000)}
            else
                callback(resultObj.code);
        }
    })
}

/*
*变更消息提醒状态
* 返回值为变更后的结果
 */
exports.remind = function(openid,callback){
    var url = baseUrl + "/user?method=message&openid=" + openid ;
    request(url,function(error,response,body){
        if (!error && response.statusCode==200){
            var resultObj = JSON.parse(body);
            if(body.error)
            {callback(-1000)}
            else if(resultObj.code==0)
                callback(resultObj.result);
            else
                callback(-1);
        }
    })
}
exports.getBalance = getBalance;
exports.scanQR = scanQR;
exports.cancelBind = cancelBind;